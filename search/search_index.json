{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A Typescript compatible imgur client for node. Getting Started Install using npm. npm install @rmp135/imgur or yarn yarn add @rmp135/imgur import the Client from the package. import { Client } from '@rmp135/imgur' Instantiate the Client with your credentials and call the relevant API endpoint. If you do not have credentials, refer to the authorization documentation on how to obtain these. The documentation in this guide will be written with Typescript / ES7 in mind. The .then / .catch callbacks still function as you would expect. // The client can be initialised with the client_id. let client = new Client('43652b743b5a7a0') // Or with full authorization information. client = new Client({ access_token: 'be3fb3e75b229254c8a44e41e376bfc01154ba42', client_id: '43652b743b5a7a2', client_secret: '2817603add0052fc9920bd3896abdd26992cf422', refresh_token: '71f0489801d0d6ae906f51ea20ae562b2ef18d42', mashape_key: 'mashapekey' }) const images = await client.Gallery.subRedditGalleries('pics') console.log(images)","title":"Home"},{"location":"#getting-started","text":"Install using npm. npm install @rmp135/imgur or yarn yarn add @rmp135/imgur import the Client from the package. import { Client } from '@rmp135/imgur' Instantiate the Client with your credentials and call the relevant API endpoint. If you do not have credentials, refer to the authorization documentation on how to obtain these. The documentation in this guide will be written with Typescript / ES7 in mind. The .then / .catch callbacks still function as you would expect. // The client can be initialised with the client_id. let client = new Client('43652b743b5a7a0') // Or with full authorization information. client = new Client({ access_token: 'be3fb3e75b229254c8a44e41e376bfc01154ba42', client_id: '43652b743b5a7a2', client_secret: '2817603add0052fc9920bd3896abdd26992cf422', refresh_token: '71f0489801d0d6ae906f51ea20ae562b2ef18d42', mashape_key: 'mashapekey' }) const images = await client.Gallery.subRedditGalleries('pics') console.log(images)","title":"Getting Started"},{"location":"authorization/","text":"Imgur documentation: https://api.imgur.com/oauth2 Imgur uses oath2 for authorization. A number of ways exist to retrieve the access token and refresh token from the user. All of which are supported by this client. The following tokens are available on the client. client_id client_secret client_token refresh_token mashape_key If the mashape_key property is provided, the Mashape specific header and API URL will automatically be set. All authorization calls (except regenerating from a refresh token) return a url for the user to log in and an authorize function to authorize that the information supplied by the user is correct. The application state argument can be ommitted in all cases. byCode This returns the authorization code as a url parameter that must be exchanged for the access code. client = new Client('43652b743b5a7a0') const auth = client.Authorize.byCode('application state') console.log(auth.url) // The user navigates to the url, enters their credentials and a url with a `code` url parameter is returned. Put this code into the `authorize` function. const tokens = await auth.authorize('https://imgur.com/?state=&code=e12f6b535469cc2a8b9c49cc42681eb8117f7a61') // If successful, the authorization tokens will be returned and populated on the client. byToken This returns the code as a url that can be parsed to extract the access code and refresh token. client = new Client('43652b743b5a7a0') const auth = client.Authorize.byToken('application state') console.log(auth.url) // The user navigates to the url and enters their credentials. A url with the access credentials are then returned. Put this url into the 'authorize' function. const tokens = auth.authorize('https://imgur.com/#access_token=c6f67dc9be42c74cfb052a640d51b056d9a06c42&expires_in=2419200&token_type=bearer&refresh_token=94294ec17cf55ac9650f0e040649d8985cf624d4&account_username=rmp135&account_id=4118974') // If successful, the authorization tokens will be returned and populated on the client. byPIN This returns a url that, when the user logs in, is displayed with a PIN code. Enter this PIN code into the authorize function. client = new Client('43652b743b5a7a0') const auth = client.Authorize.byPIN('application state') console.log(auth.url) // The user navigates to the url and enters their credentials. A page with a PIN code will be displayed. Pass this into the authorize function. const tokens = auth.authorize('4118974') // If successful, the authorization tokens will be returned and populated on the client. regenerateFromRefreshToken This will regenerate the access token from a refresh token. client = new Client('43652b743b5a7a0') // If the refresh token is not supplied, it will be taken from the client. If neither are supplied, a warning is shown and null is returned. const auth = await client.Authorize.regenerateFromRefreshToken('94294ec17cf55ac9650f0e040649d8985cf624d4') console.log(auth) // If successful, the authorization tokens will be returned and populated on the client.","title":"Authorization"},{"location":"authorization/#bycode","text":"This returns the authorization code as a url parameter that must be exchanged for the access code. client = new Client('43652b743b5a7a0') const auth = client.Authorize.byCode('application state') console.log(auth.url) // The user navigates to the url, enters their credentials and a url with a `code` url parameter is returned. Put this code into the `authorize` function. const tokens = await auth.authorize('https://imgur.com/?state=&code=e12f6b535469cc2a8b9c49cc42681eb8117f7a61') // If successful, the authorization tokens will be returned and populated on the client.","title":"byCode"},{"location":"authorization/#bytoken","text":"This returns the code as a url that can be parsed to extract the access code and refresh token. client = new Client('43652b743b5a7a0') const auth = client.Authorize.byToken('application state') console.log(auth.url) // The user navigates to the url and enters their credentials. A url with the access credentials are then returned. Put this url into the 'authorize' function. const tokens = auth.authorize('https://imgur.com/#access_token=c6f67dc9be42c74cfb052a640d51b056d9a06c42&expires_in=2419200&token_type=bearer&refresh_token=94294ec17cf55ac9650f0e040649d8985cf624d4&account_username=rmp135&account_id=4118974') // If successful, the authorization tokens will be returned and populated on the client.","title":"byToken"},{"location":"authorization/#bypin","text":"This returns a url that, when the user logs in, is displayed with a PIN code. Enter this PIN code into the authorize function. client = new Client('43652b743b5a7a0') const auth = client.Authorize.byPIN('application state') console.log(auth.url) // The user navigates to the url and enters their credentials. A page with a PIN code will be displayed. Pass this into the authorize function. const tokens = auth.authorize('4118974') // If successful, the authorization tokens will be returned and populated on the client.","title":"byPIN"},{"location":"authorization/#regeneratefromrefreshtoken","text":"This will regenerate the access token from a refresh token. client = new Client('43652b743b5a7a0') // If the refresh token is not supplied, it will be taken from the client. If neither are supplied, a warning is shown and null is returned. const auth = await client.Authorize.regenerateFromRefreshToken('94294ec17cf55ac9650f0e040649d8985cf624d4') console.log(auth) // If successful, the authorization tokens will be returned and populated on the client.","title":"regenerateFromRefreshToken"},{"location":"contributing/","text":"Development is currently active at https://github.com/rmp135/imgur Pull requests welcome! To build the client for development, simply build the Typescript files. yarn build You can run tests with: yarn test There is also a helper task for watching the tests. This requires nodemon to be installed. yarn test:watch","title":"Contributing"},{"location":"errors/","text":"Handled errors will be thrown with the response status and the data (if any) returned from imgur. const client = new Client() client.Account.sendVerificationEmail() // Required authentication. { \"status\": 403, \"body\": { \"error\": \"Malformed auth header.\", \"method\": \"POST\" }, \"success\": false, \"status\": 403 }","title":"Error Handling"},{"location":"ratelimits/","text":"The imgur API is rate limited (see https://api.imgur.com/#limits ). The rate limits can be found under the Client.RateLimits object. You can fetch the most recent rate limit by calling Client.Credits.get() . const client = new Client('43652b743b5a7a0') const limits = await client.Credits.get() console.log(limits) { \"data\": { \"UserLimit\": 2000, \"UserRemaining\": 2000, \"UserReset\": 1491753805, \"ClientReset\": 12500, \"ClientRemaining\": 12408 }, \"success\": true, \"status\": 200 } The Client.RateLimits object will be updated to reflect these new values. Hint: client.toString() will print all the relevant information. Access Token: 92ff46119ace5e5728ac580a0ed3ee02a011ed82 Client ID: 43652b743b5a7a3 Client Secret: 2817603add0052fc9920bd3896abdd26992cf424 Refresh Token: 4235a53f31464ed1c9e7099e414af25cb9c7ef32 --- Rate Limits Client Limit: 12500 Client Remaining: 12408 User Limit: 2000 User Remaining: 2000 User Reset: Wed Apr 26 2017 22:25:58 GMT+0100 (BST) IP Limit: 1250 IP Remaining: 1249 IP Reset: Sun Apr 09 2017 17:02:00 GMT+0100 (BST) These are also updated when a request is made. However, not all rates are returned with all calls so this is more of a guide than a hard number.","title":"Rate Limits"},{"location":"typescript/","text":"This library is written with full support for Typescript. The response types are taken from https://api.imgur.com/models . However, they don't all appear to follow the specified documentation so there may be some irregularities. Full disclaimer: this is my first published Typescript project so it might be a little rough around the edges. The main '@rmp135/imgur' contains a ClientConfig interface for constructing the main client configuration, an Options module for the API options parameters and ReportReasonEnum for reporting. Import these if you require them.","title":"Typescript"},{"location":"uploading/","text":"Images can be uploaded using either a base64 encoded string, web url or Buffer. const imageAsBase64 = fs.readFileSync('./someimage.png', 'base64') await client.Image.upload(imageAsBase64) If a web url is being uploaded, it must be specified in the type option. Other options can be specified here including title and description. See the imgur docs for more. await client.Image.upload('https://example.com/image.png', { type: 'url' }) See Client.Image.upload for more information.","title":"Uploading"},{"location":"api/account/","text":"Imgur Documentation If the username is ommitted or set as null, the currently authorized user will be used. get Params: username?: string client.Account.get('username') galleryFavorites Params: username?: string client.Account.galleryFavorites('username') submissions Params: username?: string client.Account.submissions('username') settings Only the currently authorized user can have their account settings retrieved. client.Account.settings('username') changeSettings Only the currently authorized user can have their account settings changed. Params: options bio?: string public_images?: boolean messaging_enabled?: boolean album_privacy?: boolean accepted_gallery_terms?: boolean username?: string show_mature?: boolean newsletter_subscribed?: boolean client.Account.get({ bio: 'bio', messaging_enabled: false }) galleryProfile Params: username?: string client.Account.galleryProfile('username') verifyEmail Params: username?: string client.Account.verifyEmail('username') Returns: Either true or false whether their email has been verified. sendVerificationEmail Only the current authorized user can have their verification email sent. client.Account.sendVerificationEmail() albums Params: username?: string page?: number client.Account.albums(null, 2) album Params: username?: string albumId: string client.Account.albums('username', 'albumId') albumsIds Params: username?: string page?: number client.Account.albumIds('username', 2) albumCount Params: username?: string client.Account.albumCount('username') albumRemove Params: username?: string albumId: string client.Account.albums('username', 'albumId') comments Params: username?: string options?: page?: number sort?: 'best' or 'top' or 'new' client.Account.comments('username', { page: 2, sort: 'best' }) comment Params: username?: string commentId: number client.Account.albums('username', 'commentId') commentIds Params: username?: string options?: page?: number sort?: 'best' or 'top' or 'new' client.Account.commentIds('username', { page: 2, sort: 'best' }) commentCount Params: username?: string client.Account.commentCount('username') commentRemove Params: username?: string commentId: string client.Account.commentRemove('username', 'commentId') images Params: username?: string page?: number client.Account.images('username', 2) image Params: username?: string imageId: string client.Account.image('username', 'imageId') imageIds Params: username?: string page?: number client.Account.imageIds('username', 2) imageCount Params: username?: string client.Account.imageCount('username') imageRemove Only images of the currently authorized user can be removed. If an image was uploaded as an anonymous user, it can be deleted with the delete hash. Params: username?: string deleteHash: string client.Account.imageRemove('username', 'imageId') replies Replies can only be retrieved for the currently authorized user. client.Account.replies()","title":"Account"},{"location":"api/account/#get","text":"Params: username?: string client.Account.get('username')","title":"get"},{"location":"api/account/#galleryfavorites","text":"Params: username?: string client.Account.galleryFavorites('username')","title":"galleryFavorites"},{"location":"api/account/#submissions","text":"Params: username?: string client.Account.submissions('username')","title":"submissions"},{"location":"api/account/#settings","text":"Only the currently authorized user can have their account settings retrieved. client.Account.settings('username')","title":"settings"},{"location":"api/account/#changesettings","text":"Only the currently authorized user can have their account settings changed. Params: options bio?: string public_images?: boolean messaging_enabled?: boolean album_privacy?: boolean accepted_gallery_terms?: boolean username?: string show_mature?: boolean newsletter_subscribed?: boolean client.Account.get({ bio: 'bio', messaging_enabled: false })","title":"changeSettings"},{"location":"api/account/#galleryprofile","text":"Params: username?: string client.Account.galleryProfile('username')","title":"galleryProfile"},{"location":"api/account/#verifyemail","text":"Params: username?: string client.Account.verifyEmail('username') Returns: Either true or false whether their email has been verified.","title":"verifyEmail"},{"location":"api/account/#sendverificationemail","text":"Only the current authorized user can have their verification email sent. client.Account.sendVerificationEmail()","title":"sendVerificationEmail"},{"location":"api/account/#albums","text":"Params: username?: string page?: number client.Account.albums(null, 2)","title":"albums"},{"location":"api/account/#album","text":"Params: username?: string albumId: string client.Account.albums('username', 'albumId')","title":"album"},{"location":"api/account/#albumsids","text":"Params: username?: string page?: number client.Account.albumIds('username', 2)","title":"albumsIds"},{"location":"api/account/#albumcount","text":"Params: username?: string client.Account.albumCount('username')","title":"albumCount"},{"location":"api/account/#albumremove","text":"Params: username?: string albumId: string client.Account.albums('username', 'albumId')","title":"albumRemove"},{"location":"api/account/#comments","text":"Params: username?: string options?: page?: number sort?: 'best' or 'top' or 'new' client.Account.comments('username', { page: 2, sort: 'best' })","title":"comments"},{"location":"api/account/#comment","text":"Params: username?: string commentId: number client.Account.albums('username', 'commentId')","title":"comment"},{"location":"api/account/#commentids","text":"Params: username?: string options?: page?: number sort?: 'best' or 'top' or 'new' client.Account.commentIds('username', { page: 2, sort: 'best' })","title":"commentIds"},{"location":"api/account/#commentcount","text":"Params: username?: string client.Account.commentCount('username')","title":"commentCount"},{"location":"api/account/#commentremove","text":"Params: username?: string commentId: string client.Account.commentRemove('username', 'commentId')","title":"commentRemove"},{"location":"api/account/#images","text":"Params: username?: string page?: number client.Account.images('username', 2)","title":"images"},{"location":"api/account/#image","text":"Params: username?: string imageId: string client.Account.image('username', 'imageId')","title":"image"},{"location":"api/account/#imageids","text":"Params: username?: string page?: number client.Account.imageIds('username', 2)","title":"imageIds"},{"location":"api/account/#imagecount","text":"Params: username?: string client.Account.imageCount('username')","title":"imageCount"},{"location":"api/account/#imageremove","text":"Only images of the currently authorized user can be removed. If an image was uploaded as an anonymous user, it can be deleted with the delete hash. Params: username?: string deleteHash: string client.Account.imageRemove('username', 'imageId')","title":"imageRemove"},{"location":"api/account/#replies","text":"Replies can only be retrieved for the currently authorized user. client.Account.replies()","title":"replies"},{"location":"api/album/","text":"Imgur Documentation If the username is ommitted or set as null, the currently authorized user will be used. get Returns the images and album info from an album. Params: id: string client.Album.get('23ffdW') images Returns only the images from an album. Params: id: string client.Album.images('23ff6W') image Params: albumId: string imageId: string client.Album.image('2f33F', '9dWf23') create Creates an album under the currently authenticated user, or an album not assigned to a user. Use either ids for an array of image ids that should be added to the album, or deletehashes for the delete hashes (for public images) that should be applied to the album. Params: options title?: string description?: boolean privacy?: string layout?: string cover?: string ids?: string[] deletehashes?: string[] client.Album.create({ ids: ['g2dWWf'], title: 'album title' }) update Params: options title?: string description?: boolean privacy?: string layout?: string cover?: string ids?: string[] deletehashes?: string[] client.Album.create({ ids: ['g2dWWf'], title: 'album title' }) remove Params: id: string client.Album.remove('g2g22K') favorite Params: id: string client.Album.remove('g2g22K') setImages Replaces all images in an album with images specified by id or delete hash. To specify only delete hashes, set imageIds to null . Params: imageIds: string[] | null deleteHashes?: string[] client.Album.setImages(['g2g22K']) addImages Adds images to an album with images specified by id or delete hash. To specify only delete hashes, set imageIds to null . Params: imageIds: string[] | null deleteHashes?: string[] client.Album.addImages(['g2g22K']) removeImages Params: imageIds: string[] client.Album.removeImages(['g2g22K'])","title":"Album"},{"location":"api/album/#get","text":"Returns the images and album info from an album. Params: id: string client.Album.get('23ffdW')","title":"get"},{"location":"api/album/#images","text":"Returns only the images from an album. Params: id: string client.Album.images('23ff6W')","title":"images"},{"location":"api/album/#image","text":"Params: albumId: string imageId: string client.Album.image('2f33F', '9dWf23')","title":"image"},{"location":"api/album/#create","text":"Creates an album under the currently authenticated user, or an album not assigned to a user. Use either ids for an array of image ids that should be added to the album, or deletehashes for the delete hashes (for public images) that should be applied to the album. Params: options title?: string description?: boolean privacy?: string layout?: string cover?: string ids?: string[] deletehashes?: string[] client.Album.create({ ids: ['g2dWWf'], title: 'album title' })","title":"create"},{"location":"api/album/#update","text":"Params: options title?: string description?: boolean privacy?: string layout?: string cover?: string ids?: string[] deletehashes?: string[] client.Album.create({ ids: ['g2dWWf'], title: 'album title' })","title":"update"},{"location":"api/album/#remove","text":"Params: id: string client.Album.remove('g2g22K')","title":"remove"},{"location":"api/album/#favorite","text":"Params: id: string client.Album.remove('g2g22K')","title":"favorite"},{"location":"api/album/#setimages","text":"Replaces all images in an album with images specified by id or delete hash. To specify only delete hashes, set imageIds to null . Params: imageIds: string[] | null deleteHashes?: string[] client.Album.setImages(['g2g22K'])","title":"setImages"},{"location":"api/album/#addimages","text":"Adds images to an album with images specified by id or delete hash. To specify only delete hashes, set imageIds to null . Params: imageIds: string[] | null deleteHashes?: string[] client.Album.addImages(['g2g22K'])","title":"addImages"},{"location":"api/album/#removeimages","text":"Params: imageIds: string[] client.Album.removeImages(['g2g22K'])","title":"removeImages"},{"location":"api/comment/","text":"Imgur Documentation get Params: commentId: string client.Comment.get('commentId') create User must be authorized to create comments. Params: imageId: string comment: string parentId?: string client.Comment.create('imageId', 'this is the comment', 'parentCommentId') remove User must be authorized as the user that created the comment to delete it. Params: commentId: string client.Comment.remove('commentId') replies Params: commentId: string client.Comment.replies('commentId') replyCreate Similar to create . Likewise, the client must be authorized to reply to a comment. Params: commentId: string imageId: string comment: string client.Comment.replyCreate('commentId', 'imageId', 'this is the comment') vote The client must be authorized to vote on a comment. Params: commentId: string vote: 'up' or 'down' client.Comment.vote('commentId', 'up') report Params: commentId: string reason?: number Refer to the Imgur documentation on which numbers refer to which reporting reason. Note: For TypeScript users, the ReportReasonEnum can be used instead of the raw numbers. client.Comment.report('commentId', 2)","title":"Comment"},{"location":"api/comment/#get","text":"Params: commentId: string client.Comment.get('commentId')","title":"get"},{"location":"api/comment/#create","text":"User must be authorized to create comments. Params: imageId: string comment: string parentId?: string client.Comment.create('imageId', 'this is the comment', 'parentCommentId')","title":"create"},{"location":"api/comment/#remove","text":"User must be authorized as the user that created the comment to delete it. Params: commentId: string client.Comment.remove('commentId')","title":"remove"},{"location":"api/comment/#replies","text":"Params: commentId: string client.Comment.replies('commentId')","title":"replies"},{"location":"api/comment/#replycreate","text":"Similar to create . Likewise, the client must be authorized to reply to a comment. Params: commentId: string imageId: string comment: string client.Comment.replyCreate('commentId', 'imageId', 'this is the comment')","title":"replyCreate"},{"location":"api/comment/#vote","text":"The client must be authorized to vote on a comment. Params: commentId: string vote: 'up' or 'down' client.Comment.vote('commentId', 'up')","title":"vote"},{"location":"api/comment/#report","text":"Params: commentId: string reason?: number Refer to the Imgur documentation on which numbers refer to which reporting reason. Note: For TypeScript users, the ReportReasonEnum can be used instead of the raw numbers. client.Comment.report('commentId', 2)","title":"report"},{"location":"api/conversation/","text":"Imgur Documentation The client must be authorized to retrieve the conversations of a user. getAll client.Conversation.getAll() get Params: conversationid: string options? page?: number offset?: number client.Conversation.get('conversationId', { page: 2, offset: 3 })","title":"Conversation"},{"location":"api/conversation/#getall","text":"client.Conversation.getAll()","title":"getAll"},{"location":"api/conversation/#get","text":"Params: conversationid: string options? page?: number offset?: number client.Conversation.get('conversationId', { page: 2, offset: 3 })","title":"get"},{"location":"api/customgallery/","text":"Imgur Documentation The client must be authorized to retrieve the custom gallery a user. get Params: options? page?: number sort?: 'viral' or 'top' or 'time' window?: 'day' or 'week' or 'month' or 'year' or 'all' client.CustomGallery.get({ page: 2, sort: 'top', window: 'week' }) image Params: imageId: string client.CustomGallery.image('imageId') addTags Params: tags string[] client.CustomGallery.addTags(['tag1', 'tag2', 'tag3']) removeTags Params: tags string[] client.CustomGallery.removeTags(['tag1', 'tag2', 'tag3'])","title":"Custom Gallery"},{"location":"api/customgallery/#get","text":"Params: options? page?: number sort?: 'viral' or 'top' or 'time' window?: 'day' or 'week' or 'month' or 'year' or 'all' client.CustomGallery.get({ page: 2, sort: 'top', window: 'week' })","title":"get"},{"location":"api/customgallery/#image","text":"Params: imageId: string client.CustomGallery.image('imageId')","title":"image"},{"location":"api/customgallery/#addtags","text":"Params: tags string[] client.CustomGallery.addTags(['tag1', 'tag2', 'tag3'])","title":"addTags"},{"location":"api/customgallery/#removetags","text":"Params: tags string[] client.CustomGallery.removeTags(['tag1', 'tag2', 'tag3'])","title":"removeTags"},{"location":"api/gallery/","text":"Imgur Documentation get Params: options? section?: 'hot' or 'top' or 'user' sort?: 'viral' or 'top' or 'time' or 'rising' page?: number window?: 'day' or 'week' or 'month' or 'year' or 'all' showViral?: boolean client.Gallery.get({ section: 'user', sort: 'rising', page: 2 }) memesGallery Params: options? sort?: 'viral' or 'top' or 'time' page?: number window?: 'day' or 'week' or 'month' or 'year' or 'all' client.Gallery.memesGallery({ sort: 'time', page: 2, window: 'all' }) memesImage Params: imageId: string client.Gallery.memesImage('imageId') subredditGalleries Params: subreddit: string options? page?: number sort?: 'time' or 'top' window?: 'day' or 'week' or 'month' or 'year' or 'all' client.Gallery.subredditGalleries({ page: 2, sort: 'time', window: 'day' }) subredditImage Params: subreddit: string imageId: string client.Gallery.subredditImage('subredditId', 'imageId') tag Params: tagName: string options? sort?: 'viral' or 'top' or 'time' or 'rising' page?: number window?: 'day' or 'week' or 'month' or 'year' or 'all' client.Gallery.tag('tagName', { sort: 'viral', page: 2, window: 'day' }) tagImage Params: tagName: string imageId: string client.Gallery.tagImage('tagName', 'imageId') itemTags itemId: string client.Gallery.itemTags('itemId') tagVoting The client must be authorized to vote on a tag. Params: itemId: string tagName: string vote: 'up' or 'down' client.Gallery.tagVoting('itemId', 'tagName', 'up') updateTags The client must be authorized to update the tags on a gallery item. Params: itemId: string tags: string[] client.Gallery.updateTags('itemId', ['tag1', 'tag2']) search If the first param is given as a string, a simple text search will be performed. Otherwise, the combination of search options will be used. Params: searchOption: string or all?: string[] any?: string[] exactly?: string note?: string[] type?: 'jpg' or 'png' or 'gif' or 'anigif' pr 'album' size?: 'small' or 'med' or 'lrg' or 'huge' filterOptions? sort?: 'viral' or 'top' or 'time' window?: 'day' or 'week' or 'month' or 'year' or 'all' page?: number The following search for 'cats' only. client.Gallery.search('cats') The following will search for 'cats' but not 'dogs' or 'mice' that are of type 'gif' client.Gallery.search({ all: ['cats'], not: ['dogs', 'mice'], type: 'gif' }) random client.Gallery.random() share Params: itemId: string title: string options? topic?: string bypassTerms?: boolean mature?: boolean tags?: string[] client.Gallery.share('itemId', { topic: 'some topic', bypassTerms: false, mature: false, tags: ['tag1', 'tag2'] }) remove The client must be authorized to remove a post from the gallery. Params: itemId:? string client.Gallery.remove('itemId') album Params: -albumId: string client.Gallery.album('albumId') image Params: imageId: string client.Gallery.image('imageId') report Refer to the Imgur documentation on which numbers refer to which reporting reason. Params: itemId: string reason?: number client.Gallery.report({ section: 'user', sort: 'rising', page: 2 }) votes Params: itemId: string client.Gallery.votes('itemId') comments Params: itemId: string sort?: 'best' or 'top' or 'new' client.Gallery.comments('itemId', 'best') comment Params: commentId: string client.Gallery.commemnt('commentId') commentCreate Params: itemId: string comment: string client.Gallery.commentCreate('itemId', 'this is a comment') commentReply Params: itemId: string commentId: string comment: string client.Gallery.commentReply('itemId', 'commentId', 'this is a comment') commentIds Params: itemId: string client.Gallery.commentIds('itemId') commentCount Params: itemId: string client.Gallery.commentCount('itemId')","title":"Gallery"},{"location":"api/gallery/#get","text":"Params: options? section?: 'hot' or 'top' or 'user' sort?: 'viral' or 'top' or 'time' or 'rising' page?: number window?: 'day' or 'week' or 'month' or 'year' or 'all' showViral?: boolean client.Gallery.get({ section: 'user', sort: 'rising', page: 2 })","title":"get"},{"location":"api/gallery/#memesgallery","text":"Params: options? sort?: 'viral' or 'top' or 'time' page?: number window?: 'day' or 'week' or 'month' or 'year' or 'all' client.Gallery.memesGallery({ sort: 'time', page: 2, window: 'all' })","title":"memesGallery"},{"location":"api/gallery/#memesimage","text":"Params: imageId: string client.Gallery.memesImage('imageId')","title":"memesImage"},{"location":"api/gallery/#subredditgalleries","text":"Params: subreddit: string options? page?: number sort?: 'time' or 'top' window?: 'day' or 'week' or 'month' or 'year' or 'all' client.Gallery.subredditGalleries({ page: 2, sort: 'time', window: 'day' })","title":"subredditGalleries"},{"location":"api/gallery/#subredditimage","text":"Params: subreddit: string imageId: string client.Gallery.subredditImage('subredditId', 'imageId')","title":"subredditImage"},{"location":"api/gallery/#tag","text":"Params: tagName: string options? sort?: 'viral' or 'top' or 'time' or 'rising' page?: number window?: 'day' or 'week' or 'month' or 'year' or 'all' client.Gallery.tag('tagName', { sort: 'viral', page: 2, window: 'day' })","title":"tag"},{"location":"api/gallery/#tagimage","text":"Params: tagName: string imageId: string client.Gallery.tagImage('tagName', 'imageId')","title":"tagImage"},{"location":"api/gallery/#itemtags","text":"itemId: string client.Gallery.itemTags('itemId')","title":"itemTags"},{"location":"api/gallery/#tagvoting","text":"The client must be authorized to vote on a tag. Params: itemId: string tagName: string vote: 'up' or 'down' client.Gallery.tagVoting('itemId', 'tagName', 'up')","title":"tagVoting"},{"location":"api/gallery/#updatetags","text":"The client must be authorized to update the tags on a gallery item. Params: itemId: string tags: string[] client.Gallery.updateTags('itemId', ['tag1', 'tag2'])","title":"updateTags"},{"location":"api/gallery/#search","text":"If the first param is given as a string, a simple text search will be performed. Otherwise, the combination of search options will be used. Params: searchOption: string or all?: string[] any?: string[] exactly?: string note?: string[] type?: 'jpg' or 'png' or 'gif' or 'anigif' pr 'album' size?: 'small' or 'med' or 'lrg' or 'huge' filterOptions? sort?: 'viral' or 'top' or 'time' window?: 'day' or 'week' or 'month' or 'year' or 'all' page?: number The following search for 'cats' only. client.Gallery.search('cats') The following will search for 'cats' but not 'dogs' or 'mice' that are of type 'gif' client.Gallery.search({ all: ['cats'], not: ['dogs', 'mice'], type: 'gif' })","title":"search"},{"location":"api/gallery/#random","text":"client.Gallery.random()","title":"random"},{"location":"api/gallery/#share","text":"Params: itemId: string title: string options? topic?: string bypassTerms?: boolean mature?: boolean tags?: string[] client.Gallery.share('itemId', { topic: 'some topic', bypassTerms: false, mature: false, tags: ['tag1', 'tag2'] })","title":"share"},{"location":"api/gallery/#remove","text":"The client must be authorized to remove a post from the gallery. Params: itemId:? string client.Gallery.remove('itemId')","title":"remove"},{"location":"api/gallery/#album","text":"Params: -albumId: string client.Gallery.album('albumId')","title":"album"},{"location":"api/gallery/#image","text":"Params: imageId: string client.Gallery.image('imageId')","title":"image"},{"location":"api/gallery/#report","text":"Refer to the Imgur documentation on which numbers refer to which reporting reason. Params: itemId: string reason?: number client.Gallery.report({ section: 'user', sort: 'rising', page: 2 })","title":"report"},{"location":"api/gallery/#votes","text":"Params: itemId: string client.Gallery.votes('itemId')","title":"votes"},{"location":"api/gallery/#comments","text":"Params: itemId: string sort?: 'best' or 'top' or 'new' client.Gallery.comments('itemId', 'best')","title":"comments"},{"location":"api/gallery/#comment","text":"Params: commentId: string client.Gallery.commemnt('commentId')","title":"comment"},{"location":"api/gallery/#commentcreate","text":"Params: itemId: string comment: string client.Gallery.commentCreate('itemId', 'this is a comment')","title":"commentCreate"},{"location":"api/gallery/#commentreply","text":"Params: itemId: string commentId: string comment: string client.Gallery.commentReply('itemId', 'commentId', 'this is a comment')","title":"commentReply"},{"location":"api/gallery/#commentids","text":"Params: itemId: string client.Gallery.commentIds('itemId')","title":"commentIds"},{"location":"api/gallery/#commentcount","text":"Params: itemId: string client.Gallery.commentCount('itemId')","title":"commentCount"},{"location":"api/image/","text":"Imgur Documentation get Params: imageId: string client.Image.get('imageId') upload Images can be uploaded as a base64 string, url or a raw Buffer. If a string is passed in, the file will be uploaded as base64 by default. To upload as a url, you must pass the relevant type in the options. Note: Upload options are not supported when uploading by Buffer. Combine this with update . You do not have to be authorized to upload an image. Params: image: string or Buffer options? title?: string type?: 'base64' or 'url' album?: string description?: string name?: string client.Image.upload('base64 encoded string', { title: 'some title', album: 'albumId' }) client.Image.upload('http://example.com/image.png', { type: 'url', title: 'some title', album: 'albumId' }) const file = fs.readFileSync('image.png') client.Image.upload(file) remove The client must be authorized to remove an image of that user. Params: imageId: string client.Image.remove('imageId') update Params: imageId: string options? title?: string descriptiom?: string client.Image.update('imageId', { title: 'new title' }) favorite Params: imageId: string client.Image.favorite('imageId')","title":"Image"},{"location":"api/image/#get","text":"Params: imageId: string client.Image.get('imageId')","title":"get"},{"location":"api/image/#upload","text":"Images can be uploaded as a base64 string, url or a raw Buffer. If a string is passed in, the file will be uploaded as base64 by default. To upload as a url, you must pass the relevant type in the options. Note: Upload options are not supported when uploading by Buffer. Combine this with update . You do not have to be authorized to upload an image. Params: image: string or Buffer options? title?: string type?: 'base64' or 'url' album?: string description?: string name?: string client.Image.upload('base64 encoded string', { title: 'some title', album: 'albumId' }) client.Image.upload('http://example.com/image.png', { type: 'url', title: 'some title', album: 'albumId' }) const file = fs.readFileSync('image.png') client.Image.upload(file)","title":"upload"},{"location":"api/image/#remove","text":"The client must be authorized to remove an image of that user. Params: imageId: string client.Image.remove('imageId')","title":"remove"},{"location":"api/image/#update","text":"Params: imageId: string options? title?: string descriptiom?: string client.Image.update('imageId', { title: 'new title' })","title":"update"},{"location":"api/image/#favorite","text":"Params: imageId: string client.Image.favorite('imageId')","title":"favorite"},{"location":"api/memegen/","text":"Imgur Documentation defaults client.Memegen.defaults()","title":"Memegen"},{"location":"api/memegen/#defaults","text":"client.Memegen.defaults()","title":"defaults"},{"location":"api/notification/","text":"Imgur Documentation The client must be authorized to retrieve notifications of a user. getAll Params: unreadOnly?: boolean client.Notification.getAll(false) get Params: notificationId: string client.Notification.get('notificationId') markAsRead Params: notificationId: string client.Notification.markAsRead('notificationId')","title":"Notification"},{"location":"api/notification/#getall","text":"Params: unreadOnly?: boolean client.Notification.getAll(false)","title":"getAll"},{"location":"api/notification/#get","text":"Params: notificationId: string client.Notification.get('notificationId')","title":"get"},{"location":"api/notification/#markasread","text":"Params: notificationId: string client.Notification.markAsRead('notificationId')","title":"markAsRead"},{"location":"api/overview/","text":"The responses from the API will match those given in the Imgur documentation . await res = client.Gallery.album('USxzb') console.log(res) Response: \"data\": { \"id\": \"USxzb\", \"title\": \"The definition of \\\"nailing it\\\"\", \"description\": null, \"datetime\": 1492125017, \"cover\": \"fGDtDVT\", \"cover_width\": 398, \"cover_height\": 480, \"account_url\": \"ICanGetYouAToeBy3oClock\", \"account_id\": 37452752, \"privacy\": \"hidden\", \"layout\": \"blog\", \"views\": 0, \"link\": \"http://imgur.com/a/USxzb\", \"ups\": 8438, \"downs\": 88, \"points\": 8350, \"score\": 8350, \"is_album\": true, \"vote\": null, \"favorite\": false, \"nsfw\": false, \"section\": \"gifsthatkeepongiving\", \"comment_count\": 375, \"topic\": \"No Topic\", \"topic_id\": 29, \"images_count\": 1, \"in_gallery\": true, \"is_ad\": false, \"tags\": [], \"in_most_viral\": true, \"images\": [{ \"id\": \"fGDtDVT\", \"title\": null, \"description\": \"Source: https://m.youtube.com/watch?v=Ft99FKKsqqE&ytbChannel=SwingNellia\", \"datetime\": 1492124964, \"type\": \"image/gif\", \"animated\": true, \"width\": 398, \"height\": 480, \"size\": 58245249, \"views\": 926608, \"bandwidth\": 53970513685392, \"vote\": null, \"favorite\": false, \"nsfw\": null, \"section\": null, \"account_url\": null, \"account_id\": null, \"is_ad\": false, \"tags\": [], \"in_most_viral\": false, \"in_gallery\": false, \"mp4\": \"http://i.imgur.com/fGDtDVT.mp4\", \"gifv\": \"http://i.imgur.com/fGDtDVT.gifv\", \"mp4_size\": 27041738, \"link\": \"http://i.imgur.com/fGDtDVTh.gif\", \"looping\": true, \"comment_count\": null, \"ups\": null, \"downs\": null, \"points\": null, \"score\": null }] }, \"success\": true, \"status\": 200 }","title":"Overview"},{"location":"api/topic/","text":"Imgur Documentation defaults Params: client.Topic.defaults() galleryTopics Params: topicId: string options sort?: 'viral' or 'top' or 'time' page?: number window?: 'day' or 'week' or 'month' or 'year' or 'all' client.Notification.get('topicId', { sort: 'viral', page: 2, window: 'day' }) topicItem Params: topicItem: string itemId: string client.Notification.markAsRead('topicItem', 'itemId')","title":"Topic"},{"location":"api/topic/#defaults","text":"Params: client.Topic.defaults()","title":"defaults"},{"location":"api/topic/#gallerytopics","text":"Params: topicId: string options sort?: 'viral' or 'top' or 'time' page?: number window?: 'day' or 'week' or 'month' or 'year' or 'all' client.Notification.get('topicId', { sort: 'viral', page: 2, window: 'day' })","title":"galleryTopics"},{"location":"api/topic/#topicitem","text":"Params: topicItem: string itemId: string client.Notification.markAsRead('topicItem', 'itemId')","title":"topicItem"}]}